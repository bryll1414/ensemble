import os
import numpy as np
import pandas as pd
import librosa
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# Function to extract features from an audio file
def extract_features(file_path):
    y, sr = librosa.load(file_path, sr=None)
    mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)
    mfccs_mean = np.mean(mfccs, axis=1)
    return mfccs_mean

# Load the dataset (assumed structure)
# Create a DataFrame with audio file paths and corresponding labels
data = {
    'file_path': [],
    'label': []
}

# Example: add your own audio files and labels
# data['file_path'].append('path/to/audio.wav')
# data['label'].append('happy')

# Convert to DataFrame
df = pd.DataFrame(data)

# Extract features for each audio file
features = []
labels = []

for index, row in df.iterrows():
    feature = extract_features(row['file_path'])
    features.append(feature)
    labels.append(row['label'])

# Convert to numpy arrays
X = np.array(features)
y = np.array(labels)

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Random Forest classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Evaluate the model
print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")
print(classification_report(y_test, y_pred))
